{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Modal } from 'react-bootstrap';\nimport { getYouTubeId } from '../../utils';\n\nfunction VideoPlayer(props) {\n  const {\n    videoUrl\n  } = props,\n        rest = _objectWithoutProperties(props, [\"videoUrl\"]);\n\n  const videoId = getYouTubeId(videoUrl);\n  return __jsx(Modal, _extends({}, rest, {\n    size: \"lg\",\n    backdropClassName: \"VideoIframe-Backdrop\",\n    dialogClassName: \"VideoIframe\",\n    \"aria-labelledby\": \"VideoPlayerModal\",\n    centered: true\n  }), __jsx(Modal.Header, {\n    closeButton: true\n  }), __jsx(Modal.Body, null, videoId ? __jsx(\"iframe\", {\n    width: \"100%\",\n    height: \"100%\",\n    className: \"shadow\",\n    src: `https://www.youtube.com/embed/${videoId}?controls=0&autoplay=1`,\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }) : null));\n}\n\nexport default VideoPlayer;","map":null,"metadata":{},"sourceType":"module"}